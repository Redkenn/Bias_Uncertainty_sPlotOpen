library(sf)
library(rnaturalearth)
library(tidyverse)
library(raster)
library(rgdal)
library(mgcv)
library(spdep)
library(gratia)
library(patchwork)

NNI.NNI_SES <- readRDS("NNI.NNI_SES.rds")

nNat2 <- readRDS("nNat2.rds")
nNat <- nNat2@data %>%  dplyr::select(id, countIN)%>% unique()

d <- readRDS("d.rds")



x <- raster()
e <- extent( -180, 180, -90, 90) 
r<-raster::crop(x, e)
r <- disaggregate(r, fact=2)
vals <- 1:ncell(r)
r <- setValues(r, vals)

df.r <- as.data.frame(r, xy=TRUE)
colnames(df.r)<- c("x","y","id")

nPlot <- d %>% dplyr::select(id, PlotObservationID)%>% unique()%>% group_by(id) %>%
  mutate(nPlot = n()) %>%
  ungroup() %>% dplyr::select(id, nPlot)%>% unique()%>%
  inner_join(., df.r, by="id")


est <- read.csv("Estimators.CSV", header=T, sep=";")
est$Latitude <- gsub(est$Latitude,pattern = ',',replacement = '.')
est$Longitude <- gsub(est$Longitude,pattern = ',',replacement = '.')
est$Completeness <- gsub(est$Completeness,pattern = ',',replacement = '.')

comp <- est %>% dplyr::select(Longitude, Latitude, Completeness) %>% drop_na() ### drop_na() solo per plots
comp$Longitude <-as.numeric(comp[,1])
comp$Latitude <-as.numeric(comp[,2])
comp$Completeness <-as.numeric(comp[,3])

coordinates(comp)= ~Longitude+Latitude

rst <- raster(ext = extent(c(-180, 180, -90, 90)), crs = crs(r), res = 0.5)
compr <- rasterize(comp, rst, fun=mean)

median_dist <- readRDS("density2.rds")
pop05 <- readRDS("pop05.rds")

rough <- raster("roughness_50KMmd_GMTEDmd.tif")
rough <- projectRaster(rough, median_dist)


nNat2 <- nNat2@data %>% inner_join(., nPlot, by="id") %>% mutate(rIN = countIN/nPlot) %>% dplyr::select(id, rIN) %>% unique()

NAT_nPlot <- nNat2 %>% inner_join(., nPlot, by="id")


cells <- NAT_nPlot$id
ctr <- as.data.frame(xyFromCell(r, cells))
coordinates(ctr)= ~x+y
crs(ctr)=crs(pop05)
crs(ctr)=crs(median_dist)
crs(ctr)=crs(compr)
crs(ctr)=crs(rough)

Vpop05 <- raster::extract(pop05, ctr)
Vdis <- raster::extract(median_dist,ctr)
Vcompr <- raster::extract(compr,ctr)
Vrough <- raster::extract(rough,ctr)

######### Testing spatial autocorrelation in GAM model without s(x,y) ##########

##### completeness ####

NAT_DIS_PLOT_POP_COMP_ROU_auto <- cbind(NAT_nPlot, pop=Vpop05, dis=Vdis, comp=Vcompr, rough=Vrough) %>% drop_na()


NAT_DIS_PLOT_POP_COMP_ROU <- NAT_DIS_PLOT_POP_COMP_ROU_auto %>% dplyr::select(rIN, nPlot, dis,pop, comp.Completeness, rough)


scaled_data <- NAT_DIS_PLOT_POP_COMP_ROU %>%
  mutate(across(everything(), scale)) %>%
  mutate(across(everything(), function(x) (x - min(x)) / (max(x) - min(x))))

colnames(scaled_data) <- c("rIN","nPlot","pop","dis","comp","rough")
scaled_data <- scaled_data  %>% relocate("comp", .before = "rIN")


COMP <- 1
pred_cols <- 2:6

names(scaled_data)[COMP]
names(scaled_data)[pred_cols]

cor_matrix <- cor(scaled_data[pred_cols])

form_gamCOMP <- as.formula(paste0(names(scaled_data)[COMP], "~", paste0("s(", names(scaled_data)[pred_cols], ")", collapse = "+")))
ModelCOMP <- gam(form_gamCOMP, data = scaled_data)

mor <- data.frame(cbind(resid=ModelCOMP[["residuals"]], x=NAT_DIS_PLOT_POP_COMP_ROU_auto$x, y=NAT_DIS_PLOT_POP_COMP_ROU_auto$y))

coordinates_sp <- SpatialPoints(mor[,2:3], proj4string = CRS("+proj=longlat +datum=WGS84"))

spatial_weights <- knearneigh(coordinates_sp, longlat = TRUE)

spatial_weights <- knn2nb(knearneigh(coordinates_sp, longlat = TRUE), sym=T)
weights <- nb2listw(spatial_weights, style="B")
moran <- moran.mc(mor$resid, weights, nsim=999)
moran

#Monte-Carlo simulation of Moran I

#data:  mor$resid 
#weights: weights  
#number of simulations + 1: 1000 

#statistic = 0.22247, observed rank = 1000, p-value = 0.001
#alternative hypothesis: greater


############## NNI

NNI <- NNI.NNI_SES %>% dplyr::select(id, nni)
NAT_DIS_PLOT_POP_NNI_ROU_auto <- cbind(NAT_nPlot, pop=Vpop05, dis=Vdis, rough=Vrough) %>% inner_join(., NNI, by="id") %>% drop_na()


NAT_DIS_PLOT_POP_NNI_ROU <- NAT_DIS_PLOT_POP_NNI_ROU_auto %>% dplyr::select(rIN, nPlot, dis,pop, rough, nni)


scaled_data <- NAT_DIS_PLOT_POP_NNI_ROU %>%
  mutate(across(everything(), scale)) %>%
  mutate(across(everything(), function(x) (x - min(x)) / (max(x) - min(x))))


scaled_data <- scaled_data  %>% relocate("nni", .before = "rIN")
colnames(scaled_data) <- c("nni","rIN","nPlot", "x", "y", "pop","dis","rough")
scaled_data <- scaled_data  %>% relocate("pop", .before = "x")
scaled_data <- scaled_data  %>% relocate("dis", .before = "x")
scaled_data <- scaled_data  %>% relocate("rough", .before = "x")

NNI <- 1
pred_cols <- 2:6

names(scaled_data)[NNI]
names(scaled_data)[pred_cols]



form_gamNNI <- as.formula(paste0(names(scaled_data)[COMP], "~", paste0("s(", names(scaled_data)[pred_cols], ")", collapse = "+")))
ModelNNI <- gam(form_gamNNI, data = scaled_data)

mor <- data.frame(cbind(resid=ModelNNI[["residuals"]], x=NAT_DIS_PLOT_POP_NNI_ROU_auto$x, y=NAT_DIS_PLOT_POP_NNI_ROU_auto$y))

coordinates_sp <- SpatialPoints(mor[,2:3], proj4string = CRS("+proj=longlat +datum=WGS84"))

spatial_weights <- knearneigh(coordinates_sp, longlat = TRUE)

spatial_weights <- knn2nb(knearneigh(coordinates_sp, longlat = TRUE, k=4), sym=T)
weights <- nb2listw(spatial_weights, style="B")
moran <- moran.mc(mor$resid, weights, nsim=999)
moran

#Monte-Carlo simulation of Moran I

#data:  mor$resid 
#weights: weights  
#number of simulations + 1: 1000 

#statistic = 0.071721, observed rank = 989, p-value = 0.011
#alternative hypothesis: greater




############## evenness 

df <- df %>% dplyr::select(id, J)
NAT_DIS_PLOT_POP_EV_ROU <- cbind(NAT_nPlot, pop=Vpop05, dis=Vdis, rough=Vrough) %>% inner_join(.,df, by="id") %>% drop_na()
NAT_DIS_PLOT_POP_EV_ROU <- NAT_DIS_PLOT_POP_EV_ROU[,-1]

NAT_DIS_PLOT_POP_EV_ROU_auto <- NAT_DIS_PLOT_POP_EV_ROU%>% dplyr::select(rIN, nPlot, dis,pop, rough, J)


scaled_data <- NAT_DIS_PLOT_POP_EV_ROU_auto %>%
  mutate(across(everything(), scale)) %>%
  mutate(across(everything(), function(x) (x - min(x)) / (max(x) - min(x))))

scaled_data <- scaled_data  %>% relocate("J", .before = "rIN")

EV <- 1
pred_cols <- 2:6

names(scaled_data)[EV]
names(scaled_data)[pred_cols]

form_gamEV <- as.formula(paste0(names(scaled_data)[EV], "~", paste0("s(", names(scaled_data)[pred_cols], ")", collapse = "+")))
ModelEV <- gam(form_gamEV, data = scaled_data)

mor <- data.frame(cbind(resid=ModelEV[["residuals"]], x=NAT_DIS_PLOT_POP_EV_ROU$x, y=NAT_DIS_PLOT_POP_EV_ROU$y))

coordinates_sp <- SpatialPoints(mor[,2:3], proj4string = CRS("+proj=longlat +datum=WGS84"))

spatial_weights <- knearneigh(coordinates_sp, longlat = TRUE)

spatial_weights <- knn2nb(knearneigh(coordinates_sp, longlat = TRUE), sym=T)
weights <- nb2listw(spatial_weights, style="B")
moran <- moran.mc(mor$resid, weights, nsim=999)

#Monte-Carlo simulation of Moran I

#data:  mor$resid 
#weights: weights  
#number of simulations + 1: 1000 

#statistic = 0.20469, observed rank = 1000, p-value = 0.001
#alternative hypothesis: greater


########## GAM COMP with  S(x,y) ########

NAT_DIS_PLOT_POP_COMP_ROU_auto <- cbind(NAT_nPlot, pop=Vpop05, dis=Vdis, comp=Vcompr, rough=Vrough) %>% drop_na()


NAT_DIS_PLOT_POP_COMP_ROU <- NAT_DIS_PLOT_POP_COMP_ROU_auto %>% dplyr::select(rIN, dis,pop, comp.Completeness, rough)


scaled_data <- NAT_DIS_PLOT_POP_COMP_ROU %>%
  mutate(across(everything(), scale)) %>%
  mutate(across(everything(), function(x) (x - min(x)) / (max(x) - min(x))))

colnames(scaled_data) <- c("rIN","pop","dis","comp","rough")
scaled_data <- scaled_data  %>% relocate("comp", .before = "rIN")

scaled_data <- scaled_data  %>% cbind(x= NAT_DIS_PLOT_POP_COMP_ROU_auto$x, y=NAT_DIS_PLOT_POP_COMP_ROU_auto$y)

COMP <- 1
pred_cols <- 2:5


names(scaled_data)[COMP]
names(scaled_data)[pred_cols]




form_gamCOMP <- as.formula(paste0(names(scaled_data)[COMP], "~", paste0("s(x,y)","+", paste0("s(", names(scaled_data)[pred_cols], ")", collapse = "+"))))
ModelCOMP <- gam(form_gamCOMP, data = scaled_data, method = "REML")

mor <- data.frame(cbind(resid=ModelCOMP[["residuals"]], x=NAT_DIS_PLOT_POP_COMP_ROU_auto$x, y=NAT_DIS_PLOT_POP_COMP_ROU_auto$y))

coordinates_sp <- SpatialPoints(mor[,2:3], proj4string = CRS("+proj=longlat +datum=WGS84"))

spatial_weights <- knearneigh(coordinates_sp, longlat = TRUE)

spatial_weights <- knn2nb(knearneigh(coordinates_sp, longlat = TRUE, k=6), sym=T)
weights <- nb2listw(spatial_weights, style="B")
moran <- moran.mc(mor$resid, weights, nsim=999)
moran



############ GAM NNI s(x,y)


NNI <- NNI.NNI_SES %>% dplyr::select(id, nni)
NAT_DIS_PLOT_POP_NNI_ROU_auto <- cbind(NAT_nPlot, pop=Vpop05, dis=Vdis, rough=Vrough) %>% inner_join(., NNI, by="id") %>% drop_na()


NAT_DIS_PLOT_POP_NNI_ROU <- NAT_DIS_PLOT_POP_NNI_ROU_auto %>% dplyr::select(rIN, nPlot, dis,pop, rough, nni)


scaled_data <- NAT_DIS_PLOT_POP_NNI_ROU %>%
  mutate(across(everything(), scale)) %>%
  mutate(across(everything(), function(x) (x - min(x)) / (max(x) - min(x))))


scaled_data <- scaled_data  %>% relocate("nni", .before = "rIN")

scaled_data <- scaled_data  %>% cbind(x= NAT_DIS_PLOT_POP_NNI_ROU_auto$x, y=NAT_DIS_PLOT_POP_NNI_ROU_auto$y)

colnames(scaled_data) <- c("nni","rIN","nPlot", "pop","dis","rough", "x", "y")

NNI <- 1
pred_cols <- 2:6

names(scaled_data)[NNI]
names(scaled_data)[pred_cols]


form_gamNNI <- as.formula(paste0(names(scaled_data)[COMP], "~", paste0("s(x,y)","+", paste0("s(", names(scaled_data)[pred_cols], ")", collapse = "+"))))
ModelNNI <- gam(form_gamNNI, data = scaled_data, method = "REML")

mor <- data.frame(cbind(resid=ModelNNI[["residuals"]], x=NAT_DIS_PLOT_POP_NNI_ROU_auto$x, y=NAT_DIS_PLOT_POP_NNI_ROU_auto$y))

coordinates_sp <- SpatialPoints(mor[,2:3], proj4string = CRS("+proj=longlat +datum=WGS84"))

spatial_weights <- knearneigh(coordinates_sp, longlat = TRUE)

spatial_weights <- knn2nb(knearneigh(coordinates_sp, longlat = TRUE), sym=T)
weights <- nb2listw(spatial_weights, style="B")
moran <- moran.mc(mor$resid, weights, nsim=999)
moran

p <- draw(ModelNNI)
p


######## GAM EVenness


df <- df %>% dplyr::select(id, J)
NAT_DIS_PLOT_POP_EV_ROU <- cbind(NAT_nPlot, pop=Vpop05, dis=Vdis, rough=Vrough) %>% inner_join(.,df, by="id") %>% drop_na()
NAT_DIS_PLOT_POP_EV_ROU <- NAT_DIS_PLOT_POP_EV_ROU[,-1]

NAT_DIS_PLOT_POP_EV_ROU_auto <- NAT_DIS_PLOT_POP_EV_ROU%>% dplyr::select(rIN, dis,pop, rough, J)


scaled_data <- NAT_DIS_PLOT_POP_EV_ROU_auto %>%
  mutate(across(everything(), scale)) %>%
  mutate(across(everything(), function(x) (x - min(x)) / (max(x) - min(x))))

scaled_data <- scaled_data  %>% relocate("J", .before = "rIN")
colnames(scaled_data)<- c("J","rIN","dis","pop","rough")
scaled_data <- scaled_data %>% cbind(x=NAT_DIS_PLOT_POP_EV_ROU$x, y=NAT_DIS_PLOT_POP_EV_ROU$y)
EV <- 1
pred_cols <- 2:5

names(scaled_data)[EV]
names(scaled_data)[pred_cols]

form_gamEV <- as.formula(paste0(names(scaled_data)[EV], "~", paste0("s(x,y)","+", paste0("s(", names(scaled_data)[pred_cols], ")", collapse = "+"))))
ModelEV <- gam(form_gamEV, data = scaled_data, method = "REML")

mor <- data.frame(cbind(resid=ModelEV[["residuals"]], x=NAT_DIS_PLOT_POP_EV_ROU$x, y=NAT_DIS_PLOT_POP_EV_ROU$y))

coordinates_sp <- SpatialPoints(mor[,2:3], proj4string = CRS("+proj=longlat +datum=WGS84"))

spatial_weights <- knearneigh(coordinates_sp, longlat = TRUE)

spatial_weights <- knn2nb(knearneigh(coordinates_sp, longlat = TRUE), sym=T)
weights <- nb2listw(spatial_weights, style="B")
moran <- moran.mc(mor$resid, weights, nsim=999)


###### GAM NNI without random distribution

NNI <- NNI.NNI_SES %>% dplyr::select(id, nni)
NAT_DIS_PLOT_POP_NNI_ROU_auto <- cbind(NAT_nPlot, pop=Vpop05, dis=Vdis, rough=Vrough) %>% inner_join(., NNI, by="id") %>% drop_na()%>%
  filter(!nni>1)


NAT_DIS_PLOT_POP_NNI_ROU <- NAT_DIS_PLOT_POP_NNI_ROU_auto %>% dplyr::select(rIN, dis,pop, rough, nni)


scaled_data <- NAT_DIS_PLOT_POP_NNI_ROU %>%
  mutate(across(everything(), scale)) %>%
  mutate(across(everything(), function(x) (x - min(x)) / (max(x) - min(x))))


scaled_data <- scaled_data  %>% relocate("nni", .before = "rIN")

scaled_data <- scaled_data  %>% cbind(x= NAT_DIS_PLOT_POP_NNI_ROU_auto$x, y=NAT_DIS_PLOT_POP_NNI_ROU_auto$y)

colnames(scaled_data) <- c("nni","rIN", "pop","dis","rough", "x", "y")

NNI <- 1
pred_cols <- 2:5

names(scaled_data)[NNI]
names(scaled_data)[pred_cols]


form_gamNNI <- as.formula(paste0(names(scaled_data)[NNI], "~", paste0("s(x,y)","+", paste0("s(", names(scaled_data)[pred_cols], ")", collapse = "+"))))
ModelNNI <- gam(form_gamNNI, data = scaled_data, method = "REML")

mor <- data.frame(cbind(resid=ModelNNI[["residuals"]], x=NAT_DIS_PLOT_POP_NNI_ROU_auto$x, y=NAT_DIS_PLOT_POP_NNI_ROU_auto$y))

coordinates_sp <- SpatialPoints(mor[,2:3], proj4string = CRS("+proj=longlat +datum=WGS84"))

spatial_weights <- knearneigh(coordinates_sp, longlat = TRUE)

spatial_weights <- knn2nb(knearneigh(coordinates_sp, longlat = TRUE, k=4), sym=T)
weights <- nb2listw(spatial_weights, style="B")
moran <- moran.mc(mor$resid, weights, nsim=999)
moran

#### non cambia un casso

#### GAM nni ses

NNI <- NNI.NNI_SES %>% dplyr::select(id, nni.ses)
NAT_DIS_PLOT_POP_NNI_ROU_auto <- cbind(NAT_nPlot, pop=Vpop05, dis=Vdis, rough=Vrough) %>% inner_join(., NNI, by="id") %>% drop_na()



NAT_DIS_PLOT_POP_NNI_ROU <- NAT_DIS_PLOT_POP_NNI_ROU_auto %>% dplyr::select(rIN, dis,pop, rough, nni.ses)


scaled_data <- NAT_DIS_PLOT_POP_NNI_ROU %>%
  mutate(across(everything(), scale)) %>%
  mutate(across(everything(), function(x) (x - min(x)) / (max(x) - min(x))))


scaled_data <- scaled_data  %>% relocate("nni.ses", .before = "rIN")

scaled_data <- scaled_data  %>% cbind(x= NAT_DIS_PLOT_POP_NNI_ROU_auto$x, y=NAT_DIS_PLOT_POP_NNI_ROU_auto$y)

colnames(scaled_data) <- c("nni","rIN", "pop","dis","rough", "x", "y")

NNI <- 1
pred_cols <- 2:5

names(scaled_data)[NNI]
names(scaled_data)[pred_cols]


form_gamNNI <- as.formula(paste0(names(scaled_data)[NNI], "~", paste0("s(x,y)","+", paste0("s(", names(scaled_data)[pred_cols], ")", collapse = "+"))))
ModelNNI <- gam(form_gamNNI, data = scaled_data, method = "REML")

mor <- data.frame(cbind(resid=ModelNNI[["residuals"]], x=NAT_DIS_PLOT_POP_NNI_ROU_auto$x, y=NAT_DIS_PLOT_POP_NNI_ROU_auto$y))

coordinates_sp <- SpatialPoints(mor[,2:3], proj4string = CRS("+proj=longlat +datum=WGS84"))

spatial_weights <- knearneigh(coordinates_sp, longlat = TRUE)

spatial_weights <- knn2nb(knearneigh(coordinates_sp, longlat = TRUE, k=4), sym=T)
weights <- nb2listw(spatial_weights, style="B")
moran <- moran.mc(mor$resid, weights, nsim=999)
moran


############# DRAW PANNEL #############

p1 <- draw(ModelEV, select = "s(rIN)")
p2 <- draw(ModelEV, select = "s(dis)")

pEv <- p1 + p2 + plot_layout(ncol = 2)

p1 <- draw(ModelCOMP, select = "s(rIN)")
p2 <- draw(ModelCOMP, select = "s(rough)")

pcom <- p1 + p2 + plot_layout(ncol = 2)

Pnni <- draw(ModelNNI, select= "s(rIN)")

ptot <- pcom + pEv+Pnni + plot_layout(nrow=3)
