library(tidyverse)
library(spatstat)
library(raster)
##### spatstat functions #####
clarkevans <- function(X, correction=c("none", "Donnelly", "cdf"),
                       clipregion=NULL)
{
  verifyclass(X, "ppp")
  W <- X$window

  # validate correction argument
  gavecorrection <- !missing(correction)
  correction <- pickoption("correction", correction,
                           c(none="none",
                             Donnelly="Donnelly",
                             donnelly="Donnelly",
                             guard="guard",
                             cdf="cdf"),
                           multi=TRUE)

  if(("Donnelly" %in% correction) && (W$type != "rectangle")) {
    if(gavecorrection)
      warning("Donnelly correction only available for rectangular windows")
    correction <- correction[correction != "Donnelly"]
  }
  
  # guard correction applied iff `clipregion' is present
  isguard <- "guard" %in% correction
  askguard <- any(isguard)
  gaveguard <- !is.null(clipregion)
  if(gaveguard)
    clipregion <- as.owin(clipregion)
  if(askguard && !gaveguard) {
    warning("guard correction not performed; clipregion not specified")
    correction <- correction[!isguard]
  } else if(gaveguard && !askguard) 
    correction <- c(correction, "guard")

  result <- clarkevansCalc(X, correction, clipregion)
  if(length(result) == 1L) result <- unname(result)
  return(result)
}

##### clarkevans.test function modified adding SES #####
clarkevans.test2 <- function (X, ..., correction = "none", 
                              clipregion = NULL, 
                              alternative = c("two.sided", "less", "greater", "clustered", "regular"), 
                              nsim = 999) 
{
  require(spatstat.utils)
  Xname <- short.deparse(substitute(X))
  miss.nsim <- missing(nsim)
  verifyclass(X, "ppp")
  W <- Window(X)
  areaW <- area.default(W)
  nX <- npoints(X)
  correction <- pickoption("correction", correction, c(none = "none", 
                                                       Donnelly = "Donnelly", donnelly = "Donnelly", guard = "guard", 
                                                       cdf = "cdf"))
  switch(correction, none = {
    corrblurb <- "No edge correction"
  }, Donnelly = {
    if (W$type != "rectangle") stop("Donnelly correction only available for rectangular windows")
    corrblurb <- "Donnelly correction"
  }, guard = {
    if (is.null(clipregion)) stop("clipregion not specified")
    clipregion <- as.owin(clipregion)
    corrblurb <- "Guard correction"
  }, cdf = {
    corrblurb <- "CDF correction"
  })
  if (missing(alternative) || is.null(alternative)) 
    alternative <- "two.sided"
  alternative <- pickoption("alternative", alternative, c(two.sided = "two.sided", 
                                                          less = "less", clustered = "less", greater = "greater", 
                                                          regular = "greater"))
  altblurb <- switch(alternative, two.sided = "two-sided", 
                     less = "clustered (R < 1)", greater = "regular (R > 1)")
  statistic <- clarkevansCalc(X, correction = correction, clipregion = clipregion, 
                              working = TRUE)
  working <- attr(statistic, "working")
  if (correction == "none" && miss.nsim) {
    SE <- with(working, sqrt(((4 - pi) * areaW)/(4 * pi))/npts)
    Z <- with(working, (Dobs - Dpois)/SE)
    p.value <- switch(alternative, less = pnorm(Z), greater = 1 - 
                        pnorm(Z), two.sided = 2 * (1 - pnorm(abs(Z))))
    pvblurb <- "Z-test"
  }
  else {
    sims <- numeric(nsim)
    for (i in seq_len(nsim)) {
      Xsim <- runifpoint(nX, win = W)
      sims[i] <- clarkevansCalc(Xsim, correction = correction, 
                                clipregion = clipregion)
    }
    p.upper <- (1 + sum(sims >= statistic))/(1 + nsim)
    p.lower <- (1 + sum(sims <= statistic))/(1 + nsim)
    p.value <- switch(alternative, less = p.lower, greater = p.upper, 
                      two.sided = min(1, 2 * min(p.lower, p.upper)))
    pvblurb <- paste("Monte Carlo test based on", nsim, "simulations of CSR with fixed n")
  }
  statistic <- as.numeric(statistic)
  names(statistic) <- "R"
  statistic.SES <- (statistic - mean(sims))/sd(sims)
  out <- list(statistic = statistic, p.value = p.value, alternative = altblurb, 
              method = c("Clark-Evans test", corrblurb, pvblurb), data.name = Xname,  
              sims=sims, 
              statistic.SES=statistic.SES)
  class(out) <- "htest"
  return(out)
}

clarkevansCalc <- function(X, correction="none", clipregion=NULL,
                           working=FALSE) {
  # calculations for Clark-Evans index or test
  W <- Window(X)
  areaW <- area.default(W)
  npts <- npoints(X)
  intensity <- npts/areaW
  # R undefined for empty point pattern
  if(npts == 0)
    return(NA)
  # Dobs = observed mean nearest neighbour distance
  nndistX <- nndist(X)
  Dobs <- mean(nndistX)
  # Dpois = Expected mean nearest neighbour distance for Poisson process
  Dpois <- 1/(2*sqrt(intensity))

  statistic <- NULL
  if(working) 
    work <- list(areaW=areaW, npts=npts, intensity=intensity,
                 Dobs=Dobs, Dpois=Dpois)
  
  # Naive uncorrected value
  if("none" %in% correction) {
    Rnaive <- Dobs/Dpois
    statistic <- c(statistic, naive=Rnaive)
  }
  # Donnelly edge correction
  if("Donnelly" %in% correction) {
     # Dedge = Edge corrected mean nearest neighbour distance, Donnelly 1978
    if(W$type == "rectangle") {
      perim <- perimeter(W)
      Dkevin  <- Dpois + (0.0514+0.0412/sqrt(npts))*perim/npts
      Rkevin <- Dobs/Dkevin
      if(working) work <- append(work, list(perim=perim, Dkevin=Dkevin))
    } else 
      Rkevin <- NA
    statistic <- c(statistic, Donnelly=Rkevin)
  }
  # guard area method
  if("guard" %in% correction && !is.null(clipregion)) {
    # use nn distances from points inside `clipregion'
    ok <- inside.owin(X, , clipregion)
    Dguard <- mean(nndistX[ok])
    Rguard <- Dguard/Dpois
    if(working) work <- append(work, list(Dguard=Dguard))
    statistic <- c(statistic, guard=Rguard)
  }
  if("cdf" %in% correction) {
    # compute mean of estimated nearest-neighbour distance distribution G
    G <- Gest(X)
    numer <- stieltjes(function(x){x}, G)$km
    denom <- stieltjes(function(x){rep.int(1, length(x))}, G)$km
    Dcdf <- numer/denom
    Rcdf <- Dcdf/Dpois
    if(working) work <- append(work, list(Dcdf=Dcdf))
    statistic <- c(statistic, cdf=Rcdf)
  }
  if(working) attr(statistic, "working") <- work

  return(statistic)
}




###############################

x <- raster()
e <- extent( -180, 180, -90, 90) 
r<-raster::crop(x, e)
r <- disaggregate(r, fact=2)
vals <- 1:ncell(r)
r <- setValues(r, vals)
df.r <- as.data.frame(r, xy=TRUE)
colnames(df.r)<- c("x","y","id")


d <- readRDS("d.rds")

y4 <- d%>% 
      dplyr::select(Longitude, Latitude, id)%>%unique()
coordinates(y4) <- ~ Longitude + Latitude

rP <- rasterToPolygons(r)
crs(y4)<- crs(rP)
sp <- over(rP, y4)
rp <- st_as_sf(rP)
prova <- cbind(rp, sp)%>%drop_na()%>%dplyr::select(id, geometry)
bbox_list <- lapply(prova$geometry, st_bbox) 
 # Convert the list of bboxes to a data frame
bbox_df <- data.frame(do.call(rbind, bbox_list)) %>% cbind(id=prova$id)

y4 <- d%>% 
  dplyr::select(Longitude, Latitude, id)%>%
  unique()%>% 
  group_by(id)%>%
  nest()

bbox_id <- d%>% 
  dplyr::select(Longitude, Latitude, id)%>%
  unique()%>% 
  inner_join(., bbox_df, by="id") %>% unique()%>%
  dplyr::select(xmin,xmax,ymin,ymax)

y5 <- list()

# Step 4: Iterate through each 'id' and create the ppp object using the corresponding bounding box
for (i in 1:nrow(bbox_id)) {
  ppp_obj <- map(y4$data, ~ ppp(.x$Longitude, .x$Latitude, window = owin(c(bbox_id[i, "xmin"], bbox_id[i, "xmax"]), c(bbox_id[i, "ymin"], bbox_id[i, "ymax"]))))
  y5[[i]] <- ppp_obj
}

##################################Ã ######

y4 <- d%>% 
  dplyr::select(Longitude, Latitude, id)%>% filter(id<20000)
  unique()%>% 
  group_by(id)%>%
  nest()

bbox_id <- d%>% 
  dplyr::select(Longitude, Latitude, id)%>% filter(id<20000)%>%
  unique()%>% 
  inner_join(., bbox_df, by="id") %>% 
  dplyr::select(xmin,xmax,ymin,ymax)%>% unique()


y5 <- list()
for (i in 1:9) {
  ppp_obj <- ppp(y4$data[[i]]$Longitude, y4$data[[i]]$Latitude, window = owin(c(bbox_id[i, "xmin"], bbox_id[i, "xmax"]), c(bbox_id[i, "ymin"], bbox_id[i, "ymax"])))
  y5[[i]] <- ppp_obj
}

#########################################

test <- map(y5, ~ clarkevans.test2(.x, correction="cdf"))

NNI <- function(inputData=NULL){
  
  nni <- clarkevans.test2(nputData, correction="cdf")$statistic.SES
  
  
  return(nni)
}


map(y4$data, ~ NNI(.x))
y5 <- .Last.value
